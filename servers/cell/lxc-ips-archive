#!/bin/bash

#
# lxc: linux Container library

# Copyright (c) 2013, Masato Taruishi <taru0216@gmail.com>

# Authors:
# Masato Taruishi <taru0216@gmail.com>


ARCHIVEDIR=/var/lib/ips-cell/sandbox/archive


install_archive()
{
    path=$1
    name=$2
    archive=$3

    echo -n "Installing '$name' with $archive... "
    install -d $rootfs && tar --strip-components=1 \
        -jxf $archive -C $path --checkpoint=100
    echo "done"

    return 0
}

configure_archive()
{
    path=$1
    rootfs=$2

    if test -x "$path/postinst"; then
      ROOTFS="$rootfs" $path/postinst
    fi

    return 0
}

copy_configuration()
{
    path=$1
    rootfs=$2
    name=$3

    if [ "$arch" = "i386" ]; then
        arch="i686"
    fi

    # if there is exactly one veth network entry, make sure it has an
    # associated hwaddr.
    nics=`grep -e '^lxc\.network\.type[ \t]*=[ \t]*veth' $path/config | wc -l`
    if [ $nics -eq 1 ]; then
        grep -q "^lxc.network.hwaddr" $path/config || sed -i -e "/^lxc\.network\.type[ \t]*=[ \t]*veth/a lxc.network.hwaddr = 00:16:3e:$(openssl rand -hex 3| sed 's/\(..\)/\1:/g; s/.$//')" $path/config
    fi

    sed -i -e "s:^lxc.rootfs.*:lxc.rootfs = $rootfs:" $path/config
    sed -i -e "s:^lxc.mount.*:lxc.mount = $path/fstab:" $path/config
    sed -i -e "s:^lxc.ustname.*:lxc.utsname = $name:" $path/config

    if [ -f $path/devices ]; then
        cat $path/devices >> $path/config
    fi
    if [ $? -ne 0 ]; then
        echo "Failed to add configuration"
        return 1
    fi

    return 0
}

usage()
{
    cat <<EOF
$1 -h|--help -p|--path=<path> -a|--archive=<archive>
EOF
    return 0
}

options=$(getopt -o ha:p:n:e: -l help,archive:,path:,name:,rootfs: -- "$@")
if [ $? -ne 0 ]; then
        usage $(basename $0)
    exit 1
fi
eval set -- "$options"

while true
do
    case "$1" in
        -h|--help)      usage $0 && exit 0;;
        --rootfs)       rootfs=$2; shift 2;;
        -p|--path)      path=$2; shift 2;;
    	-n|--name)      name=$2; shift 2;;
    	-a|--archive)   archive=$2; shift 2;;
        -e)             export $2; shift 2;;
        --)             shift 1; break ;;
        *)              break ;;
    esac
done

if [ -z "$archive" ]; then
    echo "'archive' parameter is required"
    exit 1
fi

if ! [ -f $archive ]; then
    echo "File not found: $archive"
    exit 1
fi

if [ "$(id -u)" != "0" ]; then
    echo "This script should be run as 'root'"
    exit 1
fi

if [ -z "$path" ]; then
    echo "'path' parameter is required"
    exit 1
fi

if [ -z "$name" ]; then
    echo "'name' parameter is required"
    exit 1
fi

# detect rootfs
config="$path/config"
if [ -z "$rootfs" ]; then
  if grep -q '^lxc.rootfs' $config 2>/dev/null ; then
    rootfs=`grep 'lxc.rootfs =' $config | awk -F= '{ print $2 }'`
  else
    rootfs=$path/rootfs
  fi
fi

install_archive $path $name "$archive"
if [ $? -ne 0 ]; then
    echo "failed to install $name's rootfs"
    exit 1
fi

configure_archive $path $rootfs
if [ $? -ne 0 ]; then
    echo "failed to configure archive template"
    exit 1
fi

copy_configuration $path $rootfs $name
if [ $? -ne 0 ]; then
    echo "failed to write configuration file"
    exit 1
fi
